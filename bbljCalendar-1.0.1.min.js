class BBLJCalendar { config = new BBLJCalendarConfig; static mount(t, i) { let e = new BBLJCalendar; return e.#a = t, e.#b = t.getContext("2d"), i && (e.config = i), e.#a.addEventListener("mousemove", function () { e.#c.bind(e)(event) }), e.#a.addEventListener("mouseleave", function () { e.#d.bind(e)(event) }), e.#a.addEventListener("click", function () { let t = e.#e.bind(e)(); e.config.onDateClicked(t) }), window.addEventListener("resize", function () { e.#f() }), e.updateCalendar(), e } updateCalendar() { this.#g(), this.#f() } setYearMonth(t, i) { this.config.year = t, this.config.month = i, this.updateCalendar() } #a = null; #b = null; #h = new Dimension2D(300, 150); #i = 0; #j = 0; #k = 6; #l = ["Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat"]; #m = []; #n = null; #g() { this.#m = []; let t = this.#o(); for (let i = 0; i < 42; i++) { let e = new BBLJCalendarDateInfo; if (e.date = new Date(t.getFullYear(), t.getMonth(), t.getDate()), e.date.setDate(t.getDate() + i), 0 == e.date.getDay()) { let s = new Date(this.config.year, this.config.month + 1, 1).getMonth(); if (e.date.getMonth() + 1 == s) break } if (null != this.config.dateInfos && Array.isArray(this.config.dateInfos) && this.config.dateInfos.length > 0) for (let h = 0; h < this.config.dateInfos.length; h++) { let n = this.config.dateInfos[h], o = new Date(n.date.toDateString()); if (e.date.getTime() == o.getTime()) { e.description = n.description, e.isHoliday = n.isHoliday; break } } this.#m.push(e) } this.#m.length < 36 ? this.#k = 5 : this.#k = 6 } #o() { let a = new Date(this.config.year, this.config.month - 1, 1), l = a, c = a.getDay(); for (let r = 0; r < c; r++)l.setDate(l.getDate() - 1); return l } #f() { this.#b.clearRect(0, 0, this.#a.offsetWidth, this.#a.offsetHeight), this.#h.w = this.#a.offsetWidth, this.#h.h = this.#a.offsetHeight, this.#a.width = this.#h.w, this.#a.height = this.#h.h, this.#i = this.#a.width / 7, this.#j = this.#a.height / (this.#k + 1), this.#p(), this.#q(), this.#r() } #p() { this.#b.fillStyle = "green", this.#b.fillRect(0, 0, this.#h.w, this.#j), this.#b.fillStyle = "white", this.#b.font = `${this.config.fontSize} Arial`, this.#b.textAlign = "center", this.#b.textBaseline = "middle"; for (let d = 0; d < this.#l.length; d++)this.#b.fillText(this.#l[d], this.#i / 2 + this.#i * d, this.#j / 2, this.#i) } #q() { for (let f = 0; f < this.#m.length; f++) { let g = this.#m[f].date, u = g.getDay(), x = Math.ceil((f + 1) / 7), w = u * this.#i, $ = this.#j * x; this.#b.fillStyle = "white", g.getMonth() + 1 != this.config.month && (this.#b.fillStyle = "rgb(220, 220, 220)"), null != this.#n && this.#n.x == u && this.#n.y == x && (this.#b.fillStyle = "yellow"), this.#b.fillRect(this.#i * u, this.#j * x, this.#i, this.#j), this.#b.fillStyle = "black", this.#m[f].isHoliday && (this.#b.fillStyle = "red"), this.#b.fillText(g.getDate(), w + this.#i / 2, $ + this.#j / 2, this.#i) } } #r() { this.#b.moveTo(0 + this.#b.lineWidth, 0 + this.#b.lineWidth), this.#b.beginPath(), this.#b.lineTo(this.#h.w - this.#b.lineWidth, 0 + this.#b.lineWidth), this.#b.lineTo(this.#h.w - this.#b.lineWidth, this.#h.h - this.#b.lineWidth), this.#b.lineTo(0 + this.#b.lineWidth, this.#h.h - this.#b.lineWidth), this.#b.lineTo(0 + this.#b.lineWidth, 0 + this.#b.lineWidth), this.#b.closePath(), this.#b.stroke(); for (let D = 1; D < 8; D++)this.#b.beginPath(), this.#b.moveTo(this.#i * D, 0), this.#b.lineTo(this.#i * D, this.#h.h), this.#b.closePath(), this.#b.stroke(); for (let m = 1; m < this.#k + 1; m++)this.#b.beginPath(), this.#b.moveTo(0, this.#j * m), this.#b.lineTo(this.#h.w, this.#j * m), this.#b.closePath(), this.#b.stroke() } #c(y) { let W = new Vector2D(0, 0), v = y.offsetX, C = y.offsetY; W.x = Math.floor(v / this.#i), W.y = Math.floor(C / this.#j), this.#n = W, this.#f() } #d(k) { this.#n = null, this.#f() } #e() { let T = null; if (null != this.#n) { let H = (this.#n.y - 1) * 7 + this.#n.x; if (H >= 0) { let _ = this.#m[H].date; if (null != this.config.dateInfos && Array.isArray(this.config.dateInfos) && this.config.dateInfos.length > 0) { for (let z = 0; z < this.config.dateInfos.length; z++)if (new Date(this.config.dateInfos[z].date.toDateString()).getTime() == _.getTime()) { T = this.config.dateInfos[z]; break } } } } return T } } class BBLJCalendarConfig { year = new Date().getFullYear(); month = new Date().getMonth(); fontSize = "1.25em"; dateInfos = []; onDateClicked = function (t) { }; constructor() { } } class BBLJCalendarDateInfo { date = new Date; isHoliday = !1; description = ""; constructor() { } } class Dimension2D { w = 0; h = 0; constructor(t = 0, i = 0) { this.w = t, this.h = i } } class Vector2D { x = 0; y = 0; constructor(t = 0, i = 0) { this.x = t, this.y = i } }